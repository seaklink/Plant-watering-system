#include <WiFi.h>
#include <ESPAsyncWebServer.h>
#include <AsyncTCP.h>
#include "SPIFFS.h"

// Replace with your network credentials
const char* ssid = "#####";
const char* password = "#######";

// Define the soil moisture sensor pin and pump control variables
const int soilMoisturePin = 33;
const int relayPin = 4 ; // Define the pin for the pump
bool relayState = false; // Track if the pump is currently on or off

// Create an AsyncWebServer object on port 80
AsyncWebServer server(80);

// Create an EventSource object for SSE
AsyncEventSource events("/events");

// Define the HTML content for the web page without temperature gauge
const char* indexHTML = R"rawliteral(
<!DOCTYPE html>
<html>
  <head>
    <title>ESP IOT DASHBOARD</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" type="image/png" href="favicon.png">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.2/css/all.css" integrity="sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr" crossorigin="anonymous">
    <script src="http://cdn.rawgit.com/Mikhus/canvas-gauges/gh-pages/download/2.1.7/all/gauge.min.js"></script>
    <style>
      body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f1f1f1;
      }
      .topnav {
        background-color: #333;
        color: white;
        padding: 15px;
        text-align: center;
      }
      .content {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding-top: 30px;
      }
      .card-grid {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-wrap: wrap;
        gap: 60px;
      }
      .card {
        background-color: white;
        padding: 20px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        border-radius: 8px;
        text-align: center;
        min-width: 200px;
      }
      .card-title {
        font-size: 18px;
        margin-bottom: 20px;
      }
    </style>
  </head>
  <body>
    <div class="topnav">
      <h1>ESP WEB SERVER GAUGES</h1>
    </div>
    <div class="content">
      <div class="card-grid">
        <div class="card">
          <p class="card-title">Soil Moisture</p>
          <canvas id="gauge-moisture"></canvas>
        </div>
        <div class="card">
          <p class="card-title">Pump Control</p>
          <button onclick="togglePump()">Toggle Pump</button>
          <p id="pumpStatus">Pump is OFF</p>
        </div>
      </div>
    </div>
    <script>
      // Create Soil Moisture Gauge
      var gaugeMoisture = new RadialGauge({
        renderTo: 'gauge-moisture',
        width: 300,
        height: 300,
        units: "Moisture (%)",
        minValue: 0,
        maxValue: 100,
        majorTicks: ["0", "20", "40", "60", "80", "100"],
        minorTicks: 4,
        highlights: [{"from": 80, "to": 100, "color": "#03C0C1"}],
        colorPlate: "#fff",
        needleType: "line",
        animationDuration: 1500,
      }).draw();

      // Function to toggle pump on or off
      function togglePump() {
        fetch("/togglePump")
          .then(response => response.text())
          .then(data => {
            document.getElementById("pumpStatus").innerText = data;
          });
      }

      // Get sensor readings when the page loads
      window.addEventListener('load', getReadings);

      function getReadings(){
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function() {
          if (this.readyState == 4 && this.status == 200) {
            var myObj = JSON.parse(this.responseText);
            gaugeMoisture.value = myObj.moisture;
            document.getElementById("pumpStatus").innerText = myObj.pumpState ? "Pump is ON" : "Pump is OFF";
          }
        }; 
        xhr.open("GET", "/readings", true);
        xhr.send();
      }

      if (!!window.EventSource) {
        var source = new EventSource('/events');
        source.addEventListener('new_readings', function(e) {
          var myObj = JSON.parse(e.data);
          gaugeMoisture.value = myObj.moisture;
          document.getElementById("pumpStatus").innerText = myObj.pumpState ? "Pump is ON" : "Pump is OFF";
        }, false);
      }
    </script>
  </body>
</html>
)rawliteral";

void setup() {
  Serial.begin(115200);

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  
  Serial.println("Connected to WiFi");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  // Initialize pump control pin
  pinMode(relayPin, OUTPUT);
  digitalWrite(relayPin, LOW);

  // Serve the web page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(200, "text/html", indexHTML);
  });

  // Toggle pump on/off route
  server.on("/togglePump", HTTP_GET, [](AsyncWebServerRequest *request){
    relayState = !relayState;
    digitalWrite(relayPin, relayState ? HIGH : LOW);
    request->send(200, "text/plain", relayState ? "Pump is ON" : "Pump is OFF");
  });

  // Handle request for sensor readings
  server.on("/readings", HTTP_GET, [](AsyncWebServerRequest *request){
    int moistureValue = analogRead(soilMoisturePin);
    float moisturePercentage = map(moistureValue, 4095, 0, 0, 100);

    String json = "{\"moisture\":" + String(moisturePercentage) + ",\"pumpState\":" + String(relayState) + "}";
    request->send(200, "application/json", json);
  });

  // Server-Sent Events
  events.onConnect([](AsyncEventSourceClient *client){
    Serial.println("Client connected");
  });
  
  server.addHandler(&events);
  server.begin();
}

void loop() {
  int moistureValue = analogRead(soilMoisturePin);
  float moisturePercentage = map(moistureValue, 4095, 0, 0, 100);

  String json = "{\"moisture\":" + String(moisturePercentage) + ",\"pumpState\":" + String(relayState) + "}";
  events.send(json.c_str(), "new_readings", millis());

  delay(2000);
}
